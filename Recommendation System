import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.model_selection import train_test_split
from scipy.sparse import csr_matrix

data = {
    'user_id': [1, 1, 1, 2, 2, 3, 3, 3, 4, 4],
    'movie_id': [101, 102, 103, 101, 104, 102, 103, 105, 101, 105],
    'rating': [5, 3, 4, 4, 5, 2, 4, 5, 3, 4]
}

df = pd.DataFrame(data)
user_movie_matrix = df.pivot_table(index='user_id', columns='movie_id', values='rating')
user_movie_matrix.fillna(0, inplace=True)
user_similarity = cosine_similarity(user_movie_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)
def recommend_movies(user_id, user_movie_matrix, user_similarity_df, num_recommendations=5):
    user_ratings = user_movie_matrix.loc[user_id]
    similar_users = user_similarity_df[user_id].sort_values(ascending=False).index[1:]  
    similar_users_ratings = user_movie_matrix.loc[similar_users]
    
    weighted_ratings = similar_users_ratings.T.dot(user_similarity_df[user_id][similar_users])
    normalized_ratings = weighted_ratings / user_similarity_df[user_id][similar_users].sum()
    
    recommendations = normalized_ratings[~user_ratings.index.isin(user_ratings[user_ratings > 0].index)]
    return recommendations.sort_values(ascending=False).head(num_recommendations)

recommendations = recommend_movies(1, user_movie_matrix, user_similarity_df)
print(recommendations)
